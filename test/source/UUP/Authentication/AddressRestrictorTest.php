<?php

namespace UUP\Authentication;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2014-02-28 at 11:35:22.
 */
class AddressRestrictorTest extends \PHPUnit_Framework_TestCase
{

        /**
         * @var AddressRestrictor
         */
        protected $object;
        private static $defaddr = array(
                AddressRestrictor::localhost_ipv4,
                AddressRestrictor::localhost_ipv6
        );

        /**
         * Sets up the fixture, for example, opens a network connection.
         * This method is called before a test is executed.
         */
        protected function setUp()
        {
                $this->object = new AddressRestrictor();
                $_SERVER['REMOTE_ADDR'] = AddressRestrictor::localhost_ipv4;
        }

        /**
         * Tears down the fixture, for example, closes a network connection.
         * This method is called after a test is executed.
         */
        protected function tearDown()
        {
                
        }

        /**
         * @covers UUP\Authentication\AddressRestrictor::__get
         */
        public function test__get()
        {
                $this->assertTrue(is_array($this->object->addresses));
                $this->assertTrue(count($this->object->addresses) == 2);
                foreach ($this->object->addresses as $address) {
                        $this->assertTrue(in_array($address, self::$defaddr));
                }
        }

        /**
         * @covers UUP\Authentication\AddressRestrictor::__toString
         */
        public function test__toString()
        {
                $ipaddr = '192.168.1.2';
                $this->object->set(array());
                $this->assertTrue(strlen($this->object) == 0);
                $this->object->set(array($ipaddr));
                $this->assertTrue(strlen($this->object) != 0);
                $this->assertTrue($this->object == $ipaddr);
        }

        /**
         * @covers UUP\Authentication\AddressRestrictor::set
         */
        public function testSet()
        {
                $this->assertTrue(count($this->object->addresses) == 2);

                $this->object->set(array());
                $this->assertTrue(count($this->object->addresses) == 0);
                $this->object->set(null);
                $this->assertTrue(count($this->object->addresses) == 2);
        }

        /**
         * @covers UUP\Authentication\AddressRestrictor::reset
         */
        public function testReset()
        {
                $this->assertTrue(count($this->object->addresses) == 2);
                $this->object->add('192.168.1.2');
                $this->assertTrue(count($this->object->addresses) == 3);
                $this->object->reset();
                $this->assertTrue(count($this->object->addresses) == 2);
        }

        /**
         * @covers UUP\Authentication\AddressRestrictor::clear
         */
        public function testClear()
        {
                $this->assertTrue(count($this->object->addresses) == 2);
                $this->object->clear();
                $this->assertTrue(count($this->object->addresses) == 0);
        }

        /**
         * @covers UUP\Authentication\AddressRestrictor::contains
         */
        public function testContains()
        {
                $address = '192.168.1.2';
                $this->object->clear();
                $this->assertFalse($this->object->contains($address));
                $this->object->add($address);
                $this->assertTrue($this->object->contains($address));

                $address = array('192.168.1.2', '192.168.1.3');
                $this->object->clear();
                $this->assertFalse($this->object->contains($address));
                $this->object->add($address);
                $this->assertTrue($this->object->contains($address));
        }

        /**
         * @covers UUP\Authentication\AddressRestrictor::add
         */
        public function testAdd()
        {
                $address = '192.168.1.2';
                $this->object->clear();
                $this->object->add($address);
                $this->assertTrue(in_array($address, $this->object->addresses));
        }

        /**
         * @covers UUP\Authentication\AddressRestrictor::get
         */
        public function testGet()
        {
                $this->assertTrue(is_array($this->object->get()));
                $this->assertTrue(count($this->object->get()) == 2);
                $this->object->clear();
                $this->assertTrue(is_array($this->object->get()));
                $this->assertTrue(count($this->object->get()) == 0);
        }

        /**
         * @covers UUP\Authentication\AddressRestrictor::accepted
         */
        public function testAccepted()
        {
                $this->assertTrue($this->object->accepted());
                $this->object->clear();
                $this->assertFalse($this->object->accepted());
                $address = '192.168.1.2';
                $this->object->add($address);
                $this->assertFalse($this->object->accepted());
                $_SERVER['REMOTE_ADDR'] = $address;
                $this->assertTrue($this->object->accepted());
        }

        /**
         * @covers UUP\Authentication\AddressRestrictor::match
         */
        public function testMatch()
        {
                // 
                // Test single address case:
                // 
                $match = '192.168.1.1';
                $this->object->set($match);
                $this->assertTrue($this->object->match($match));
                $this->assertFalse($this->object->match('192.168.1.2'));
                $this->object->clear();
                $this->assertFalse($this->object->match($match));

                // 
                // Test address range case:
                // 
                $range = '192.168.1.1-192.168.1.254';
                $this->object->set($range);
                // Inside:
                $match = '192.168.1.20';
                $this->assertTrue($this->object->match($match));
                // Boundary:
                $match = '192.168.1.1';
                $this->assertTrue($this->object->match($match));
                $match = '192.168.1.254';
                $this->assertTrue($this->object->match($match));
                // Outside:
                $match = '192.168.1.0';
                $this->assertFalse($this->object->match($match));
                $match = '192.168.1.255';
                $this->assertFalse($this->object->match($match));
                $match = '192.168.2.1';
                $this->assertFalse($this->object->match($match));

                $range = '192.168.1.1-192.168.2.1';
                $this->object->set($range);
                // Inside:
                $match = '192.168.1.20';
                $this->assertTrue($this->object->match($match));
                // Boundary:
                $match = '192.168.1.1';
                $this->assertTrue($this->object->match($match));
                $match = '192.168.2.1';
                $this->assertTrue($this->object->match($match));
                // Outside:
                $match = '192.168.1.0';
                $this->assertFalse($this->object->match($match));
                $match = '192.168.2.2';
                $this->assertFalse($this->object->match($match));

                $range = '192.168.1.1-192.168.255.255';
                $this->object->set($range);
                // Inside:
                $match = '192.168.1.20';
                $this->assertTrue($this->object->match($match));
                // Boundary:
                $match = '192.168.1.1';
                $this->assertTrue($this->object->match($match));
                $match = '192.168.255.255';
                $this->assertTrue($this->object->match($match));
                // Outside:
                $match = '192.168.1.0';
                $this->assertFalse($this->object->match($match));
                $match = '192.169.0.0';
                $this->assertFalse($this->object->match($match));
                $match = '192.169.1.0';
                $this->assertFalse($this->object->match($match));
                $match = '192.169.1.1';
                $this->assertFalse($this->object->match($match));

                // 
                // Test address mask case (CIDR):
                // 
                $range = '0.0.0.0/0';
                $this->object->set($range);
                // Inside:
                $match = '192.168.1.1';
                $this->assertTrue($this->object->match($match));
                // Boundary:
                $match = '0.0.0.0';
                $this->assertTrue($this->object->match($match));

                $range = '192.168.1.1/32';
                $this->object->set($range);
                // Inside:
                $match = '192.168.1.1';
                $this->assertTrue($this->object->match($match));
                // Boundary:
                $match = '192.168.1.1';
                $this->assertTrue($this->object->match($match));
                // Outside:
                $match = '192.168.1.0';
                $this->assertFalse($this->object->match($match));
                $match = '192.168.1.2';

                $range = '192.168.1.0/24';
                $this->object->set($range);
                // Inside:
                $match = '192.168.1.20';
                $this->assertTrue($this->object->match($match));
                // Boundary:
                $match = '192.168.1.0';
                $this->assertTrue($this->object->match($match));
                $match = '192.168.1.255';
                $this->assertTrue($this->object->match($match));
                // Outside:
                $match = '192.168.0.1';
                $this->assertFalse($this->object->match($match));
                $match = '192.168.0.255';
                $this->assertFalse($this->object->match($match));
                $match = '192.168.2.0';
                $this->assertFalse($this->object->match($match));

                $range = '192.168.1.1/24';
                $this->object->set($range);
                // Inside:
                $match = '192.168.1.20';
                $this->assertTrue($this->object->match($match));
                // Boundary:
                $match = '192.168.1.0';
                $this->assertTrue($this->object->match($match));
                $match = '192.168.1.255';
                $this->assertTrue($this->object->match($match));
                // Outside:
                $match = '192.168.0.1';
                $this->assertFalse($this->object->match($match));
                $match = '192.168.0.255';
                $this->assertFalse($this->object->match($match));
                $match = '192.168.2.0';
                $this->assertFalse($this->object->match($match));

                $range = '192.168.1.255/24';
                $this->object->set($range);
                // Inside:
                $match = '192.168.1.20';
                $this->assertTrue($this->object->match($match));
                // Boundary:
                $match = '192.168.1.0';
                $this->assertTrue($this->object->match($match));
                $match = '192.168.1.255';
                $this->assertTrue($this->object->match($match));
                // Outside:
                $match = '192.168.0.1';
                $this->assertFalse($this->object->match($match));
                $match = '192.168.0.255';
                $this->assertFalse($this->object->match($match));
                $match = '192.168.2.0';
                $this->assertFalse($this->object->match($match));

                $range = '192.168.0.0/16';
                $this->object->set($range);
                // Inside:
                $match = '192.168.34.56';
                $this->assertTrue($this->object->match($match));
                // Boundary:
                $match = '192.168.0.0';
                $this->assertTrue($this->object->match($match));
                $match = '192.168.255.255';
                $this->assertTrue($this->object->match($match));
                // Outside:
                $match = '192.167.255.255';
                $this->assertFalse($this->object->match($match));
                $match = '192.169.0.0';
                $this->assertFalse($this->object->match($match));

                $range = '192.168.1.1/26';
                $this->object->set($range);
                // Inside:
                $match = '192.168.1.20';
                $this->assertTrue($this->object->match($match));
                // Boundary:
                $match = '192.168.1.0';
                $this->assertTrue($this->object->match($match));
                $match = '192.168.1.63';
                $this->assertTrue($this->object->match($match));
                // Outside:
                $match = '192.168.0.255';
                $this->assertFalse($this->object->match($match));
                $match = '192.168.1.64';
                $this->assertFalse($this->object->match($match));

                $range = '192.168.1.64/26';
                $this->object->set($range);
                // Inside:
                $match = '192.168.1.100';
                $this->assertTrue($this->object->match($match));
                // Boundary:
                $match = '192.168.1.64';
                $this->assertTrue($this->object->match($match));
                $match = '192.168.1.127';
                $this->assertTrue($this->object->match($match));
                // Outside:
                $match = '192.168.1.63';
                $this->assertFalse($this->object->match($match));
                $match = '192.168.1.128';
                $this->assertFalse($this->object->match($match));

                $range = '192.168.1.128/26';
                $this->object->set($range);
                // Inside:
                $match = '192.168.1.150';
                $this->assertTrue($this->object->match($match));
                // Boundary:
                $match = '192.168.1.128';
                $this->assertTrue($this->object->match($match));
                $match = '192.168.1.191';
                $this->assertTrue($this->object->match($match));
                // Outside:
                $match = '192.168.1.127';
                $this->assertFalse($this->object->match($match));
                $match = '192.168.1.192';
                $this->assertFalse($this->object->match($match));

                $range = '192.168.1.192/26';
                $this->object->set($range);
                // Inside:
                $match = '192.168.1.200';
                $this->assertTrue($this->object->match($match));
                // Boundary:
                $match = '192.168.1.192';
                $this->assertTrue($this->object->match($match));
                $match = '192.168.1.255';
                $this->assertTrue($this->object->match($match));
                // Outside:
                $match = '192.168.1.191';
                $this->assertFalse($this->object->match($match));
                $match = '192.168.2.1';
                $this->assertFalse($this->object->match($match));

                $range = '192.168.32.0/21';
                $this->object->set($range);
                // Inside:
                $match = '192.168.32.1';
                $this->assertTrue($this->object->match($match));
                // Boundary:
                $match = '192.168.32.0';
                $this->assertTrue($this->object->match($match));
                $match = '192.168.39.255';
                $this->assertTrue($this->object->match($match));
                // Outside:
                $match = '192.168.31.255';
                $this->assertFalse($this->object->match($match));
                $match = '192.168.40.1';
                $this->assertFalse($this->object->match($match));

                $range = '192.168.32.66/31';
                $this->object->set($range);
                // Inside:
                $match = '192.168.32.66';
                $this->assertTrue($this->object->match($match));
                // Boundary:
                $match = '192.168.32.66';
                $this->assertTrue($this->object->match($match));
                $match = '192.168.32.67';
                $this->assertTrue($this->object->match($match));
                // Outside:
                $match = '192.168.32.65';
                $this->assertFalse($this->object->match($match));
                $match = '192.168.32.68';
                $this->assertFalse($this->object->match($match));

                $range = '192.168.32.66/32';
                $this->object->set($range);
                // Inside:
                $match = '192.168.32.66';
                $this->assertTrue($this->object->match($match));
                // Boundary:
                $match = '192.168.32.66';
                $this->assertTrue($this->object->match($match));
                // Outside:
                $match = '192.168.32.65';
                $this->assertFalse($this->object->match($match));
                $match = '192.168.32.67';
                $this->assertFalse($this->object->match($match));

                // 
                // Test address mask case (netmask). Because netmasks are related 
                // to CIDR, we only need to do minor tests.
                // 
                $range = '192.168.1.128/255.255.255.192';
                $this->object->set($range);
                // Inside:
                $match = '192.168.1.150';
                $this->assertTrue($this->object->match($match));
                // Boundary:
                $match = '192.168.1.128';
                $this->assertTrue($this->object->match($match));
                $match = '192.168.1.191';
                $this->assertTrue($this->object->match($match));
                // Outside:
                $match = '192.168.1.127';
                $this->assertFalse($this->object->match($match));
                $match = '192.168.1.192';
                $this->assertFalse($this->object->match($match));

                $range = '192.168.32.0/255.255.248.0';
                $this->object->set($range);
                // Inside:
                $match = '192.168.32.1';
                $this->assertTrue($this->object->match($match));
                // Boundary:
                $match = '192.168.32.0';
                $this->assertTrue($this->object->match($match));
                $match = '192.168.39.255';
                $this->assertTrue($this->object->match($match));
                // Outside:
                $match = '192.168.31.255';
                $this->assertFalse($this->object->match($match));
                $match = '192.168.40.1';
                $this->assertFalse($this->object->match($match));

                $range = '192.168.32.54/255.255.255.255';
                $this->object->set($range);
                // Inside:
                $match = '192.168.32.54';
                $this->assertTrue($this->object->match($match));
                // Boundary:
                $match = '192.168.32.54';
                $this->assertTrue($this->object->match($match));
                // Outside:
                $match = '192.168.32.53';
                $this->assertFalse($this->object->match($match));
                $match = '192.168.32.55';
                $this->assertFalse($this->object->match($match));

                // 
                // Multicast (class D).
                // 
                $range = '224.0.0.0';
                $this->object->set($range);
                // Inside:
                $match = '224.0.0.0';
                $this->assertTrue($this->object->match($match));
                // Boundary:
                $match = '224.0.0.0';
                $this->assertTrue($this->object->match($match));
                // Outside:
                $match = '223.255.255.255';
                $this->assertFalse($this->object->match($match));
                $match = '224.0.0.1';
                $this->assertFalse($this->object->match($match));

                $range = '239.255.255.255';
                $this->object->set($range);
                // Inside:
                $match = '239.255.255.255';
                $this->assertTrue($this->object->match($match));
                // Boundary:
                $match = '239.255.255.255';
                $this->assertTrue($this->object->match($match));
                // Outside:
                $match = '239.255.255.254';
                $this->assertFalse($this->object->match($match));
                $match = '240.0.0.0';
                $this->assertFalse($this->object->match($match));

                $range = '228.45.56.78';
                $this->object->set($range);
                // Inside:
                $match = '228.45.56.78';
                $this->assertTrue($this->object->match($match));
                // Boundary:
                $match = '228.45.56.78';
                $this->assertTrue($this->object->match($match));
                // Outside:
                $match = '228.45.56.77';
                $this->assertFalse($this->object->match($match));
                $match = '228.45.56.79';
                $this->assertFalse($this->object->match($match));
        }

        /**
         * @covers UUP\Authentication\AddressRestrictor::getUser
         */
        public function testGetUser()
        {
                $this->assertTrue($this->object->getSubject() == $_SERVER['REMOTE_ADDR']);
        }

}
