<?php

namespace UUP\Authentication\Stack\Access;

use UUP\Authentication\Exception;
use UUP\Authentication\Stack\Access\ChainAccessObject;
use UUP\Authentication\Stack\Access\ChainArrayAccess;
use UUP\Authentication\Stack\Access\ChainPropertyAccess;
use UUP\Authentication\Stack\AuthenticatorChain;

require_once __DIR__ . '/ChainAccessObject.php';

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2014-03-13 at 02:00:15.
 */
class ChainPropertyAccessTest extends \PHPUnit_Framework_TestCase
{

        /**
         * @var AuthenticatorChain
         */
        protected $chains;
        /**
         * @var ChainArrayAccess
         */
        protected $access;
        /**
         * @var ChainAccessObject
         */
        protected $object;

        /**
         * Sets up the fixture, for example, opens a network connection.
         * This method is called before a test is executed.
         */
        protected function setUp()
        {
                $this->object = new ChainAccessObject();
                $this->chains = new AuthenticatorChain(array('obj1' => $this->object));
                $this->access = new ChainPropertyAccess($this->chains, true);
        }

        /**
         * Tears down the fixture, for example, closes a network connection.
         * This method is called after a test is executed.
         */
        protected function tearDown()
        {
                
        }

        /**
         * @covers UUP\Authentication\Stack\Access\ChainPropertyAccess::__get
         */
        public function test__get()
        {
                $this->assertNotNull($this->access->obj1);
                $this->assertNotNull($this->access->obj2);     // created "on demand"
                $this->assertNotNull($this->access->obj2->sub);

                $this->assertTrue($this->access->obj1 instanceof ChainPropertyAccess);
                $this->assertTrue($this->access->obj2 instanceof ChainPropertyAccess);
        }

        /**
         * @covers UUP\Authentication\Stack\Access\ChainPropertyAccess::__set
         */
        public function test__set()
        {
                $this->access->obj1->prop = 3;       // use property
                $this->assertTrue($this->access->obj1->prop == $this->object->prop);
                $this->access->obj1->func = 2;       // use function
                $this->assertTrue($this->access->obj1->func == $this->object->func);

                $this->access->obj2 = new ChainAccessObject();
                $this->access->obj2->prop = 5;
                $this->assertTrue($this->access->obj2->prop == 5);
                $this->assertTrue($this->access->obj1->prop == $this->object->prop);
        }

        /**
         * @covers UUP\Authentication\Stack\Access\ChainPropertyAccess::__isset
         */
        public function test__isset()
        {
                $this->assertTrue(isset($this->access->obj1));
                $this->assertFalse(isset($this->access->obj2));
        }

        /**
         * @covers UUP\Authentication\Stack\Access\ChainPropertyAccess::__unset
         */
        public function test__unset()
        {
                $this->assertTrue(isset($this->access->obj1));
                unset($this->access->obj1);
                $this->assertFalse(isset($this->access->obj1));
        }

        /**
         * @expectedException Exception
         */
        public function testThrows()
        {
                // throws: Failed set property name on immutable non-chain object
                $this->access->obj1->name = "xxx";
        }

}
