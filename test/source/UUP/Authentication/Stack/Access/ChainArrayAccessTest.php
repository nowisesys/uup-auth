<?php

namespace UUP\Authentication\Stack\Access;

use UUP\Authentication\Exception;
use UUP\Authentication\Stack\Access\ChainAccessObject;
use UUP\Authentication\Stack\Access\ChainArrayAccess;
use UUP\Authentication\Stack\AuthenticatorChain;

require_once __DIR__ . '/ChainAccessObject.php';

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2014-03-12 at 20:34:58.
 * 
 * Notice: 
 * -------
 * It's kind of pointless to test the supporting OffsetXxx() functions. 
 * Instead we are only testing array subscript access. That whats supposed 
 * to be used anyway!
 */
class ChainArrayAccessTest extends \PHPUnit_Framework_TestCase
{

        /**
         * @var AuthenticatorChain
         */
        protected $chains;
        /**
         * @var ChainArrayAccess
         */
        protected $access;
        /**
         * @var ChainAccessObject
         */
        protected $object;

        /**
         * Sets up the fixture, for example, opens a network connection.
         * This method is called before a test is executed.
         */
        protected function setUp()
        {
                $this->object = new ChainAccessObject();
                $this->chains = new AuthenticatorChain(array('obj1' => $this->object));
                $this->access = new ChainArrayAccess($this->chains, true);
        }

        /**
         * Tears down the fixture, for example, closes a network connection.
         * This method is called after a test is executed.
         */
        protected function tearDown()
        {
                
        }

        /**
         * @covers UUP\Authentication\Stack\Access\ChainArrayAccess::offsetExists
         */
        public function testOffsetExists()
        {
                $this->assertTrue(isset($this->access['obj1']));
                $this->assertFalse(isset($this->access['obj2']));
        }

        /**
         * @covers UUP\Authentication\Stack\Access\ChainArrayAccess::offsetGet
         */
        public function testOffsetGet()
        {
                $this->assertNotNull($this->access['obj1']);
                $this->assertNotNull($this->access['obj2']);     // created "on demand"
                $this->assertNotNull($this->access['obj2']['sub']);

                $this->assertTrue($this->access['obj1'] instanceof ChainArrayAccess);
                $this->assertTrue($this->access['obj2'] instanceof ChainArrayAccess);

                $this->access['obj3'] = new ChainAccessObject();
                print_r($this->access['obj3']);
                print_r($this->access['@']);
                // Test object access:
                $this->assertTrue($this->access['obj3']['@'] instanceof ChainAccessObject);
                // Test array access:
                $this->assertTrue(is_array($this->access['@']));
        }

        /**
         * @covers UUP\Authentication\Stack\Access\ChainArrayAccess::offsetSet
         */
        public function testOffsetSet()
        {
                $this->access['obj1']['prop'] = 3;       // use property
                $this->assertTrue($this->access['obj1']['prop'] == $this->object->prop);
                $this->access['obj1']['func'] = 2;       // use function
                $this->assertTrue($this->access['obj1']['func'] == $this->object->func);

                $this->access['obj2'] = new ChainAccessObject();
                $this->access['obj2']['prop'] = 5;
                $this->assertTrue($this->access['obj2']['prop'] == 5);
                $this->assertTrue($this->access['obj1']['prop'] == $this->object->prop);
        }

        /**
         * @expectedException Exception
         */
        public function testThrows()
        {
                // throws: Failed set property name on immutable non-chain object
                $this->access['obj1']['name'] = "xxx";
        }

        /**
         * @covers UUP\Authentication\Stack\Access\ChainArrayAccess::offsetUnset
         */
        public function testOffsetUnset()
        {
                $this->assertTrue(isset($this->access['obj1']));
                unset($this->access['obj1']);
                $this->assertFalse(isset($this->access['obj1']));
        }

}
