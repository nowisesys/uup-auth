<?php

namespace UUP\Authentication\Stack\Filter\Iterator;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2014-03-06 at 21:26:56.
 */
class RandomAccessIteratorTest extends \PHPUnit_Framework_TestCase
{

        /**
         * @var RandomAccessIterator
         */
        protected $object;

        /**
         * Sets up the fixture, for example, opens a network connection.
         * This method is called before a test is executed.
         */
        protected function setUp()
        {
                $this->object = new RandomAccessIterator(
                    new \ArrayIterator(
                    array(
                        'key1' => 'val1',
                        'key2' => 'val2'
                    )
                    )
                );
        }

        /**
         * Tears down the fixture, for example, closes a network connection.
         * This method is called after a test is executed.
         */
        protected function tearDown()
        {
                
        }

        /**
         * @covers UUP\Authentication\Stack\Filter\Iterator\RandomAccessIterator::offsetExists
         */
        public function testOffsetExists()
        {
                // Test function access:
                $this->assertTrue($this->object->offsetExists('key1'));
                $this->assertFalse($this->object->offsetExists('key3'));
                // Test array access:
                $this->assertTrue(isset($this->object['key1']));
                $this->assertFalse(isset($this->object['key3']));
        }

        /**
         * @covers UUP\Authentication\Stack\Filter\Iterator\RandomAccessIterator::offsetGet
         */
        public function testOffsetGet()
        {
                // Test function access:
                $this->assertTrue($this->object->offsetGet('key1') == 'val1');
                $this->assertTrue($this->object->offsetGet('key2') == 'val2');
                // Test array access:
                $this->assertTrue($this->object['key1'] == 'val1');
                $this->assertTrue($this->object['key2'] == 'val2');
        }

        /**
         * @covers UUP\Authentication\Stack\Filter\Iterator\RandomAccessIterator::offsetSet
         */
        public function testOffsetSet()
        {
                // Test function access:
                $this->assertFalse($this->object->offsetExists('key3'));
                $this->object->offsetSet('key3', 'val3');
                $this->assertTrue($this->object->offsetExists('key3'));
                // Test array access:
                $this->setUp();
                $this->assertFalse(isset($this->object['key3']));
                $this->object['key3'] = 'val3';
                $this->assertTrue(isset($this->object['key3']));
        }

        /**
         * @covers UUP\Authentication\Stack\Filter\Iterator\RandomAccessIterator::offsetUnset
         */
        public function testOffsetUnset()
        {
                // Test function access:
                $this->assertTrue($this->object->offsetExists('key2'));
                $this->object->offsetUnset('key2');
                $this->assertFalse($this->object->offsetExists('key2'));
                $this->assertTrue($this->object->offsetExists('key1'));
                // Test array access:
                $this->setUp();
                $this->assertTrue(isset($this->object['key2']));
                unset($this->object['key2']);
                $this->assertFalse(isset($this->object['key2']));
                $this->assertTrue(isset($this->object['key1']));
        }

        /**
         * @covers UUP\Authentication\Stack\Filter\Iterator\RandomAccessIterator::getIterator
         */
        public function testGetIterator()
        {
                $this->assertTrue($this->object->getIterator() instanceof \Iterator);
        }

}
