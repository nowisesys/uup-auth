<?php

namespace UUP\Authentication\Stack\Filter;

use UUP\Authentication\Stack\AuthenticatorChain;

require_once 'FilterIteratorTestBase.php';

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2014-03-06 at 11:32:28.
 */
class ChainFilterIteratorTest extends FilterIteratorTestBase
{

        /**
         * @var ChainFilterIterator
         */
        protected $object;

        /**
         * Sets up the fixture, for example, opens a network connection.
         * This method is called before a test is executed.
         */
        protected function setUp()
        {
                
        }

        /**
         * Tears down the fixture, for example, closes a network connection.
         * This method is called after a test is executed.
         */
        protected function tearDown()
        {
                
        }

        /**
         * @covers UUP\Authentication\Stack\Filter\ChainFilterIterator::accept
         */
        public function testAccept()
        {
                $iterator = new \RecursiveArrayIterator(array());
                $this->object = new \RecursiveIteratorIterator($iterator, \RecursiveIteratorIterator::CHILD_FIRST);
                $this->result = new ChainFilterIterator($this->object);
                $this->assertFalse($this->result->hasChildren());

                $iterator = new \RecursiveArrayIterator(self::$data);
                $this->object = new \RecursiveIteratorIterator($iterator, \RecursiveIteratorIterator::CHILD_FIRST);
                $this->result = new ChainFilterIterator($this->object);
                $this->assertTrue($this->result->hasChildren());

                foreach ($this->result as $key => $val) {
                        printf("++ key: %s, val: %s\n", $key, print_r($val, true));
                        $this->assertTrue(isset($key));
                        $this->assertTrue(is_string($key));
                        $this->assertTrue($val instanceof AuthenticatorChain || is_array($val));
                }
        }

}
