<?php

namespace UUP\Authentication\Stack;

use UUP\Authentication\HostnameAuthenticator;

/**
 * @property-read array $chain Chain array accessor.
 */
class AuthenticatorChainAccessor extends AuthenticatorChain
{

        public function __get($name)
        {
                return $this->chain;
        }

        public function __toString()
        {
                return print_r($this->chain, true);
        }

}

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2014-03-10 at 23:09:29.
 */
class AuthenticatorChainTest extends \PHPUnit_Framework_TestCase
{

        /**
         * @var AuthenticatorChainAccessor
         */
        protected $object;

        /**
         * Sets up the fixture, for example, opens a network connection.
         * This method is called before a test is executed.
         */
        protected function setUp()
        {
                $this->object = new AuthenticatorChainAccessor();
        }

        /**
         * Tears down the fixture, for example, closes a network connection.
         * This method is called after a test is executed.
         */
        protected function tearDown()
        {
                
        }

        /**
         * @covers UUP\Authentication\Stack\AuthenticatorChain::insert
         */
        public function testInsert()
        {
                $parent = $this->object;

                $key = 'auth';
                $val = new HostnameAuthenticator();
                $res = $parent->insert($key, $val);
                printf("insert(): parent: %s\n", $parent);
                $this->assertTrue(count($parent->chain) == 1);
                $this->assertTrue($parent->chain[$key] == $val);
                $this->assertTrue($parent->chain[$key] instanceof HostnameAuthenticator);
                $this->assertTrue($res instanceof HostnameAuthenticator);

                $parent->clear();
                $key = 'chain';
                $val = array('auth' => new HostnameAuthenticator());
                $res = $parent->insert($key, $val);
                printf("insert(): parent: %s\n", $parent);
                $this->assertTrue(count($parent->chain) == 1);
                $this->assertTrue($parent->chain[$key] instanceof AuthenticatorChain);
                $this->assertTrue($res instanceof AuthenticatorChain);

                $parent->clear();
                $key = 'chain';
                $val = new AuthenticatorChain();
                $res = $parent->insert($key, $val);
                printf("insert(): parent: %s\n", $parent);
                $this->assertTrue(count($parent->chain) == 1);
                $this->assertTrue($parent->chain[$key] instanceof AuthenticatorChain);
                $this->assertTrue($res instanceof AuthenticatorChain);
        }

        /**
         * @covers UUP\Authentication\Stack\AuthenticatorChain::append
         */
        public function testAppend()
        {
                $val = array(
                        'key1' => 'c1v1',
                        'key2' => 'c1v2'
                );
                $parent = $this->object;
                printf("append(): parent: %s\n", $parent);
                $this->assertTrue(count($parent->chain) == 0);

                $res = $parent->append($val);
                printf("append(): parent: %s\n", $parent);
                $this->assertTrue(count($parent->chain) == 2);
                $this->assertTrue($res instanceof AuthenticatorChain);

                $res = $parent->append($val);
                printf("append(): parent: %s\n", $parent);
                $this->assertTrue(count($parent->chain) == 2);
                $this->assertTrue($res instanceof AuthenticatorChain);

                $val = array(
                        'chain' => array(
                                'key1' => 'c1v1',
                                'key2' => 'c1v2'
                        )
                );

                $res = $parent->append($val);
                printf("append(): parent: %s\n", $parent);

                $this->assertTrue(count($parent->chain) == 3);
                $this->assertTrue(count($parent->chain['chain']) == 1);
                $this->assertTrue($parent->chain['chain'] instanceof AuthenticatorChain);
                $this->assertTrue($res instanceof AuthenticatorChain);
        }

        /**
         * @covers UUP\Authentication\Stack\AuthenticatorChain::remove
         */
        public function testRemove()
        {
                $val = array(
                        'key1' => 'c1v1',
                        'key2' => 'c1v2'
                );
                $parent = $this->object;
                $parent->set($val);
                printf("remove(): parent: %s\n", $parent);
                $this->assertTrue(count($parent->chain) == 2);

                $parent->remove('key2');
                printf("remove(): parent: %s\n", $parent);
                $this->assertTrue(count($parent->chain) == 1);
                $this->assertTrue(isset($parent->chain['key1']));
                $this->assertFalse(isset($parent->chain['key2']));

                $parent->remove('key1');
                printf("remove(): parent: %s\n", $parent);
                $this->assertTrue(count($parent->chain) == 0);
                $this->assertFalse(isset($parent->chain['key1']));
        }

        /**
         * @covers UUP\Authentication\Stack\AuthenticatorChain::add
         */
        public function testAdd()
        {
                $parent = $this->object;

                $key = 'auth';
                $val = new HostnameAuthenticator();
                $res = $parent->add($key, $val);
                printf("add(): parent: %s\n", $parent);
                $this->assertTrue(count($parent->chain) == 1);
                $this->assertTrue($parent->chain[$key] == $val);
                $this->assertTrue($parent->chain[$key] instanceof HostnameAuthenticator);
                $this->assertTrue($res instanceof AuthenticatorChain);
                $this->assertTrue($res == $parent);

                $parent->clear();
                $key = 'chain';
                $val = array('auth' => new HostnameAuthenticator());
                $res = $parent->add($key, $val);
                printf("add(): parent: %s\n", $parent);
                $this->assertTrue(count($parent->chain) == 1);
                $this->assertTrue($parent->chain[$key] instanceof AuthenticatorChain);
                $this->assertTrue($res instanceof AuthenticatorChain);
                $this->assertTrue($res == $parent);

                $parent->clear();
                $key = 'chain';
                $val = new AuthenticatorChain();
                $res = $parent->add($key, $val);
                printf("add(): parent: %s\n", $parent);
                $this->assertTrue(count($parent->chain) == 1);
                $this->assertTrue($parent->chain[$key] instanceof AuthenticatorChain);
                $this->assertTrue($res instanceof AuthenticatorChain);
                $this->assertTrue($res == $parent);
        }

        /**
         * @covers UUP\Authentication\Stack\AuthenticatorChain::create
         */
        public function testCreate()
        {
                $parent = $this->object;

                $key = 'chain';
                $res = $parent->create($key);
                printf("create(): parent: %s\n", $parent);
                $this->assertTrue(count($parent->chain) == 1);
                $this->assertTrue($parent->chain[$key] instanceof AuthenticatorChain);
                $this->assertTrue($res instanceof AuthenticatorChain);
                $this->assertFalse($res == $parent);
        }

        /**
         * @covers UUP\Authentication\Stack\AuthenticatorChain::replace
         */
        public function testReplace()
        {
                $val = array(
                        'key1' => 'c1v1',
                        'key2' => 'c1v2'
                );
                $parent = $this->object;
                printf("replace(): parent: %s\n", $parent);
                $this->assertTrue(count($parent->chain) == 0);

                $res = $parent->replace($val);
                printf("replace(): parent: %s\n", $parent);
                $this->assertTrue(count($parent->chain) == 2);
                $this->assertTrue($res instanceof AuthenticatorChain);

                $res = $parent->replace($val);
                printf("replace(): parent: %s\n", $parent);
                $this->assertTrue(count($parent->chain) == 2);
                $this->assertTrue($res instanceof AuthenticatorChain);

                $val = array(
                        'chain' => array(
                                'key1' => 'c1v1',
                                'key2' => 'c1v2'
                        )
                );

                $res = $parent->replace($val);
                printf("replace(): parent: %s\n", $parent);

                $this->assertTrue(count($parent->chain) == 1);
                $this->assertTrue(count($parent->chain['chain']) == 1);
                $this->assertTrue($parent->chain['chain'] instanceof AuthenticatorChain);
                $this->assertTrue($res instanceof AuthenticatorChain);
        }

        /**
         * @covers UUP\Authentication\Stack\AuthenticatorChain::exist
         */
        public function testExist()
        {
                $val = array(
                        'key1' => 'c1v1',
                        'key2' => 'c1v2'
                );

                $parent = $this->object;
                printf("exist(): parent: %s\n", $parent);
                $this->assertTrue(count($parent->chain) == 0);
                $this->assertFalse($parent->exist('key1'));

                $parent->set($val);
                printf("exist(): parent: %s\n", $parent);
                $this->assertTrue(count($parent->chain) == 2);
                $this->assertTrue($parent->exist('key1'));
        }

        /**
         * @covers UUP\Authentication\Stack\AuthenticatorChain::get
         */
        public function testGet()
        {
                $parent = $this->object;

                $key = 'auth';
                $val = new HostnameAuthenticator();

                $parent->add($key, $val);

                $this->assertTrue(count($parent->chain) == 1);
                $this->assertTrue($parent->get($key) != null);
                $this->assertTrue($parent->get($key) == $val);
                $this->assertTrue($parent->get($key) instanceof HostnameAuthenticator);

                printf("get(): parent: %s\n", $parent);
        }

        /**
         * @covers UUP\Authentication\Stack\AuthenticatorChain::set
         */
        public function testSet()
        {
                $val = array(
                        'key1' => 'c1v1',
                        'key2' => 'c1v2'
                );

                $parent = $this->object;
                printf("set(): parent: %s\n", $parent);
                $this->assertTrue(count($parent->chain) == 0);
                $this->assertFalse($parent->exist('key1'));

                $parent->set($val);
                printf("set(): parent: %s\n", $parent);
                $this->assertTrue(count($parent->chain) == 2);
                $this->assertTrue($parent->exist('key1'));
        }

        /**
         * @covers UUP\Authentication\Stack\AuthenticatorChain::clear
         */
        public function testClear()
        {
                $val = array(
                        'key1' => 'c1v1',
                        'key2' => 'c1v2'
                );

                $parent = $this->object;
                $parent->set($val);
                printf("clear(): parent: %s\n", $parent);
                $this->assertTrue(count($parent->chain) == 2);
                $this->assertTrue($parent->exist('key1'));

                $parent->clear();
                printf("clear(): parent: %s\n", $parent);
                $this->assertTrue(count($parent->chain) == 0);
                $this->assertFalse($parent->exist('key1'));
        }

        /**
         * @covers UUP\Authentication\Stack\AuthenticatorChain::want
         */
        public function testWant()
        {
                $parent = $this->object;

                $key = 'auth';
                $val = new HostnameAuthenticator();
                $res = $parent->add($key, $val);

                $this->assertTrue(count($parent->chain) == 1);
                $this->assertTrue($parent->get($key) != null);
                $this->assertTrue($parent->get($key) == $val);
                $this->assertTrue($parent->get($key) instanceof HostnameAuthenticator);

                $this->assertTrue($parent->want($key) != null);
                $this->assertTrue($parent->want($key) == $val);
                $this->assertTrue($parent->want($key) instanceof HostnameAuthenticator);

                $key = 'nonexist';
                $this->assertTrue($parent->want($key) != null);
                $this->assertTrue($parent->want($key) instanceof AuthenticatorChain);
        }

        /**
         * @covers UUP\Authentication\Stack\AuthenticatorChain::getIterator
         */
        public function testGetIterator()
        {
                $parent = $this->object;
                $this->assertTrue($parent->getIterator() instanceof \ArrayIterator);
        }

        /**
         * @covers UUP\Authentication\Stack\AuthenticatorChain::getArrayCopy
         */
        public function testGetArrayCopy()
        {
                $parent = $this->object;
                $res = $parent->getArrayCopy();
                $this->assertTrue(is_array($res));
                $this->assertTrue(count($res) == 0);
        }

}
