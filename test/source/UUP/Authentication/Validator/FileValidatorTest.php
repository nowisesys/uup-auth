<?php

namespace UUP\Authentication\Validator;

function tab_encode($data)
{
        $array = array();

        foreach ($data as $arr) {
                $array[] = implode("\t", $arr);
        }

        return implode("\n", $array);
}

/**
 * Generated by PHPUnit_SkeletonGenerator on 2017-11-16 at 14:01:10.
 */
class FileValidatorTest extends \PHPUnit_Framework_TestCase
{

        /**
         * Sets up the fixture, for example, opens a network connection.
         * This method is called before a test is executed.
         */
        protected function setUp()
        {
                
        }

        /**
         * Tears down the fixture, for example, closes a network connection.
         * This method is called after a test is executed.
         */
        protected function tearDown()
        {
                
        }

        private function createTestFiles($data)
        {
                file_put_contents("data.ser", serialize($data));
                file_put_contents("data.json", json_encode($data));
                file_put_contents("data.tab", tab_encode($data));
        }

        private function deleteTestFiles()
        {
                unlink("data.ser");
                unlink("data.json");
                unlink("data.tab");
        }

        /**
         * @covers UUP\Authentication\Validator\FileValidator::authenticate()
         */
        public function testAuthenticate()
        {
                $this->runDataSimple();
                $this->runDataKeyed();
                $this->runDataOffset();
                $this->runDataReorder();
                $this->runDataInside();
        }

        private function runDataSimple()
        {
                $this->runDataTest(array(
                        array('user1', 'pass1'),
                        array('user2', 'pass1'),
                        array('user3', 'pass3')
                    ), array(
                        'user' => 0,
                        'pass' => 1
                ));
        }

        private function runDataKeyed()
        {
                $this->runDataTest(array(
                        array('u' => 'user1', 'p' => 'pass1'),
                        array('u' => 'user2', 'p' => 'pass1'),
                        array('u' => 'user3', 'p' => 'pass3')
                    ), array(
                        'user' => 'u',
                        'pass' => 'p'
                ));
        }

        private function runDataOffset()
        {
                $this->runDataTest(array(
                        array('name1', 45, 'user1', 'pass1'),
                        array('name2', 33, 'user2', 'pass1'),
                        array('name3', 29, 'user3', 'pass3')
                    ), array(
                        'user' => 2,
                        'pass' => 3
                ));
        }

        private function runDataReorder()
        {
                $this->runDataTest(array(
                        array('pass1', 'user1'),
                        array('pass1', 'user2'),
                        array('pass3', 'user3')
                    ), array(
                        'user' => 1,
                        'pass' => 0
                ));
        }

        private function runDataInside()
        {
                $this->runDataTest(array(
                        array('pass1', 'user1'),
                        array('pass1', 'user2'),
                        array('pass3', 'user3')
                    ), array(
                        'user' => false,
                        'pass' => false
                ));
        }
        
        private function runDataTest($data, $colmap)
        {
                $this->createTestFiles($data);
                $this->runAllTests($colmap);
                $this->deleteTestFiles();
        }

        private function runAllTests($colmap)
        {
                // 
                // Test PHP serialized data:
                // 
                $object = new FileValidator("data.ser", FileValidator::FORMAT_PHP);
                $object->colmap = $colmap;
                $this->runValidatorTest($object);

                // 
                // Test JSON encoded data:
                // 
                $object = new FileValidator("data.json", FileValidator::FORMAT_JSON);
                $object->colmap = $colmap;
                $this->runValidatorTest($object);

                // 
                // Test tab-separated data:
                // 
                if (is_numeric(current($colmap))) {
                        $object = new FileValidator("data.tab", FileValidator::FORMAT_TAB);
                        $object->colmap = $colmap;
                        $this->runValidatorTest($object);
                }
        }

        private function runValidatorTest($object)
        {
                // 
                // Should pass:
                // 
                $object->setCredentials("user1", "pass1");
                $expect = true;
                $actual = $object->authenticate();
                $this->assertNotNull($actual);
                $this->assertTrue(is_bool($actual));
                $this->assertEquals($actual, $expect);

                $object->setCredentials("user2", "pass1");
                $expect = true;
                $actual = $object->authenticate();
                $this->assertNotNull($actual);
                $this->assertTrue(is_bool($actual));
                $this->assertEquals($actual, $expect);

                $object->setCredentials("user3", "pass3");
                $expect = true;
                $actual = $object->authenticate();
                $this->assertNotNull($actual);
                $this->assertTrue(is_bool($actual));
                $this->assertEquals($actual, $expect);

                // 
                // Should fail:
                // 
                $object->setCredentials(null, null);
                $expect = false;
                $actual = $object->authenticate();
                $this->assertNotNull($actual);
                $this->assertTrue(is_bool($actual));
                $this->assertEquals($actual, $expect);

                $object->setCredentials("user1", null);
                $expect = false;
                $actual = $object->authenticate();
                $this->assertNotNull($actual);
                $this->assertTrue(is_bool($actual));
                $this->assertEquals($actual, $expect);

                $object->setCredentials("user4", null);
                $expect = false;
                $actual = $object->authenticate();
                $this->assertNotNull($actual);
                $this->assertTrue(is_bool($actual));
                $this->assertEquals($actual, $expect);

                $object->setCredentials("user1", "pass3");
                $expect = false;
                $actual = $object->authenticate();
                $this->assertNotNull($actual);
                $this->assertTrue(is_bool($actual));
                $this->assertEquals($actual, $expect);

                $object->setCredentials("user4", "pass3");
                $expect = false;
                $actual = $object->authenticate();
                $this->assertNotNull($actual);
                $this->assertTrue(is_bool($actual));
                $this->assertEquals($actual, $expect);
        }

}
