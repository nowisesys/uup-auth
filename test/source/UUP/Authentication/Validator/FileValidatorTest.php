<?php

namespace UUP\Authentication\Validator;

function tab_encode($data)
{
        $array = array();

        foreach ($data as $user => $pass) {
                $array[] = sprintf("%s\t%s", $user, $pass);
        }

        return implode("\n", $array);
}

/**
 * Generated by PHPUnit_SkeletonGenerator on 2017-11-16 at 14:01:10.
 */
class FileValidatorTest extends \PHPUnit_Framework_TestCase
{

        /**
         * Sets up the fixture, for example, opens a network connection.
         * This method is called before a test is executed.
         */
        protected function setUp()
        {
                $data = array(
                        'user1' => 'pass1',
                        'user2' => 'pass1',
                        'user3' => 'pass3'
                );

                if (!file_exists("data.ser")) {
                        file_put_contents("data.ser", serialize($data));
                }
                if (!file_exists("data.json")) {
                        file_put_contents("data.json", json_encode($data));
                }
                if (!file_exists("data.tab")) {
                        file_put_contents("data.tab", tab_encode($data));
                }
        }

        /**
         * Tears down the fixture, for example, closes a network connection.
         * This method is called after a test is executed.
         */
        protected function tearDown()
        {
                
        }

        /**
         * @covers UUP\Authentication\Validator\FileValidator::authenticate()
         */
        public function testAuthenticate()
        {
                // 
                // Test PHP serialized data:
                // 
                $object = new FileValidator("data.ser", FileValidator::FORMAT_PHP);
                $this->runValidatorTest($object);

                // 
                // Test JSON encoded data:
                // 
                $object = new FileValidator("data.json", FileValidator::FORMAT_JSON);
                $this->runValidatorTest($object);

                // 
                // Test tab-separated data:
                // 
                $object = new FileValidator("data.tab", FileValidator::FORMAT_TAB);
                $this->runValidatorTest($object);
        }

        private function runValidatorTest($object)
        {
                // 
                // Should pass:
                // 
                $object->setCredentials("user1", "pass1");
                $expect = true;
                $actual = $object->authenticate();
                $this->assertNotNull($actual);
                $this->assertTrue(is_bool($actual));
                $this->assertEquals($actual, $expect);

                $object->setCredentials("user2", "pass1");
                $expect = true;
                $actual = $object->authenticate();
                $this->assertNotNull($actual);
                $this->assertTrue(is_bool($actual));
                $this->assertEquals($actual, $expect);

                $object->setCredentials("user3", "pass3");
                $expect = true;
                $actual = $object->authenticate();
                $this->assertNotNull($actual);
                $this->assertTrue(is_bool($actual));
                $this->assertEquals($actual, $expect);

                // 
                // Should fail:
                // 
                $object->setCredentials(null, null);
                $expect = false;
                $actual = $object->authenticate();
                $this->assertNotNull($actual);
                $this->assertTrue(is_bool($actual));
                $this->assertEquals($actual, $expect);

                $object->setCredentials("user1", null);
                $expect = false;
                $actual = $object->authenticate();
                $this->assertNotNull($actual);
                $this->assertTrue(is_bool($actual));
                $this->assertEquals($actual, $expect);

                $object->setCredentials("user4", null);
                $expect = false;
                $actual = $object->authenticate();
                $this->assertNotNull($actual);
                $this->assertTrue(is_bool($actual));
                $this->assertEquals($actual, $expect);

                $object->setCredentials("user1", "pass3");
                $expect = false;
                $actual = $object->authenticate();
                $this->assertNotNull($actual);
                $this->assertTrue(is_bool($actual));
                $this->assertEquals($actual, $expect);

                $object->setCredentials("user4", "pass3");
                $expect = false;
                $actual = $object->authenticate();
                $this->assertNotNull($actual);
                $this->assertTrue(is_bool($actual));
                $this->assertEquals($actual, $expect);
        }

}
